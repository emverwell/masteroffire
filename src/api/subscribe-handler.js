"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.subscribeHandler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const client_sqs_1 = require("@aws-sdk/client-sqs");
const client_ses_1 = require("@aws-sdk/client-ses");
const REGION = "ap-southeast-2";
const dynamoDBClient = new client_dynamodb_1.DynamoDBClient({ region: REGION });
const sqsClient = new client_sqs_1.SQSClient({ region: REGION });
const sesClient = new client_ses_1.SESClient({ region: REGION });
const subscribeHandler = async (event) => {
    try {
        console.info("subscribeHandler initiated");
        // Extract the email from the request body
        const email = JSON.parse(event.body || "").email;
        const is_subscribed = JSON.parse(event.body || "").is_subscribed;
        const subscribedEmail = await checkSubscribed(email);
        if (subscribedEmail.is_subscribed) {
            console.info("Email already subscribed");
            return updateSubscribed(subscribedEmail);
        }
        // Create a PutItemCommand for DynamoDB
        const putCommand = {
            TableName: process.env.SUBSCRIBED_EMAIL_TABLE_NAME,
            Item: {
                email: { S: email },
                is_subscribed: { S: is_subscribed },
            },
        };
        // Put the item into DynamoDB
        await dynamoDBClient.send(new client_dynamodb_1.PutItemCommand(putCommand));
        console.info("Subscription successful!");
        return {
            statusCode: 200,
            body: JSON.stringify({ message: "Subscription successful!" }),
        };
    }
    catch (error) {
        console.error("Error:", error);
        return {
            statusCode: 500,
            body: JSON.stringify({
                message: "Subscription failed. Please try again.",
            }),
        };
    }
};
exports.subscribeHandler = subscribeHandler;
async function checkSubscribed(email) {
    const subscribedEmail = await dynamoDBClient.send(new client_dynamodb_1.GetItemCommand({
        TableName: process.env.SUBSCRIBED_EMAIL_TABLE_NAME,
        Key: { email: { S: email } },
    }));
    return subscribedEmail.Item || {};
}
async function updateSubscribed(subscription) {
    // If already subscribed, update only if not already subscribed
    const bool_subscribed = subscription.is_subscribed.S === 'true';
    const email = subscription.email.S;
    const is_subscribed = subscription.is_subscribed.S;
    if (!bool_subscribed) {
        // Create an UpdateItemCommand for DynamoDB
        const updateCommand = {
            TableName: process.env.SUBSCRIBED_EMAIL_TABLE_NAME,
            Key: { email: { S: email } },
            UpdateExpression: "SET is_subscribed = :is_subscribed",
            ExpressionAttributeValues: {
                ":is_subscribed": { S: "true" },
            },
        };
        // Update the item in DynamoDB
        await dynamoDBClient.send(new client_dynamodb_1.UpdateItemCommand(updateCommand));
        // Send a message to SQS for email notification
        const sqsParams = {
            QueueUrl: "your-sqs-queue-url",
            MessageBody: JSON.stringify({ email }),
        };
        await sqsClient.send(new client_sqs_1.SendMessageCommand(sqsParams));
        console.info("Subscription updated to true!");
        return {
            statusCode: 200,
            body: JSON.stringify({ message: "Subscription updated to true!" }),
        };
    }
    else {
        console.info("Email is already subscribed.");
        return {
            statusCode: 200,
            body: JSON.stringify({ message: "Email is already subscribed." }),
        };
    }
}
//# sourceMappingURL=data:application/json;base64,