"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCartId = exports.cartHandler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
// import { Tracer } from "@aws-lambda-powertools/tracer";
// import { Logger } from "@aws-lambda-powertools/logger";
// import { Metrics } from "@aws-lambda-powertools/metrics";
const crypto_1 = require("crypto");
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
// import { Cart } from "../layers/models";
const dynamoDB = new client_dynamodb_1.DynamoDBClient({ region: "ap-southeast-2" });
const logger = console;
// const tracer = new Tracer();
// const metrics = new Metrics();
const secretsManager = new client_secrets_manager_1.SecretsManager();
const cartHandler = async (event) => {
    logger.info("cartHandler initiated");
    var requestPayload = null;
    const cartCookie = getCartId(event.headers);
    const cartId = cartCookie[0];
    logger.info("cartHandler headers: ", event.headers);
    const headers = getHeaders(cartId);
    try {
        requestPayload = JSON.parse(event.body);
        logger.info(`requestPayload: ${requestPayload} and headers: ${headers}`);
    }
    catch (error) {
        return {
            statusCode: 400,
            headers: headers,
            body: JSON.stringify({ message: "No Request payload" }),
        };
    }
    // Handle Shopping Cart
    if (!requestPayload && event.httpMethod == "GET") {
        const pk = `cart#${cartId}`;
        logger.info("GET cart/ invoked pk:", pk);
        const params = {
            TableName: process.env.CART_TABLE_NAME,
            FilterExpression: "pk = :pk",
            ExpressionAttributeValues: {
                ":pk": { S: pk },
            },
        };
        const data = await dynamoDB.send(new client_dynamodb_1.ScanCommand(params));
        const response_body = JSON.stringify(data.Items);
        return {
            statusCode: 200,
            headers: headers,
            body: response_body,
        };
    }
    // Handling Adding/Modifying Items from the Cart.
    const product_id = requestPayload?.productId ?? "defaultProductId";
    logger.info("product_id:", product_id);
    const quantity = requestPayload?.quantity ?? 1;
    const string_price = requestPayload?.priceString ?? "$0";
    //   const product_details: string = requestPayload?.productName || "";
    const price = parseFloat(string_price.replace("$", ""));
    const cartTable = process.env.CART_TABLE_NAME;
    let pk, sk, ttl;
    pk = `cart#${cartId}`;
    sk = `product#${product_id}`;
    ttl = generateTtl();
    logger.info(`Cart entry - pk:${pk}, sk:${sk}, ttl:${ttl}`);
    if (quantity < 0) {
        await dynamoDB.send(new client_dynamodb_1.UpdateItemCommand({
            TableName: cartTable,
            Key: {
                pk: { S: pk },
                sk: { S: sk },
            },
            ExpressionAttributeNames: {
                "#quantity": "quantity",
                "#price": "price",
                "#expirationTime": "expirationTime",
                "#productDetail": "productDetail",
            },
            ExpressionAttributeValues: {
                ":val": { N: quantity.toString() },
                ":unitPrice": { N: price.toString() },
                ":ttl": { N: generateTtl().toString() },
                //   ":productDetail": { S: product_details },
                ":limit": { N: Math.abs(quantity).toString() },
            },
            UpdateExpression: "ADD #quantity :val SET #expirationTime = :ttl, #productDetail = :productDetail, #price = :unitPrice",
            ConditionExpression: "quantity >= :limit",
        }));
    }
    else {
        await dynamoDB.send(new client_dynamodb_1.UpdateItemCommand({
            TableName: cartTable,
            Key: {
                pk: { S: pk },
                sk: { S: `product#${product_id}` },
            },
            ExpressionAttributeNames: {
                "#quantity": "quantity",
                "#price": "price",
                "#expirationTime": "expirationTime",
                "#productDetail": "productDetail",
            },
            ExpressionAttributeValues: {
                ":val": { N: quantity.toString() },
                ":unitPrice": { N: price.toString() },
                ":ttl": { N: generateTtl().toString() },
                //   ":productDetail": { S: product_details },
            },
            UpdateExpression: "ADD #quantity :val SET #expirationTime = :ttl, #productDetail = :productDetail, #price = :unitPrice",
        }));
    }
    return {
        statusCode: 200,
        headers: headers,
        body: JSON.stringify({
            message: `Processed successful! ${product_id} - ${quantity} CartId: ${cartId}`,
        }),
    };
};
exports.cartHandler = cartHandler;
function getHeaders(cartId) {
    /**
     * Get the headers to add to response data
     */
    const headers = {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Credentials": true,
        "Set-Cookie": `cartId=${cartId}; Max-Age=${60 * 60 * 24}; Secure; HttpOnly; SameSite=None; Path=/`,
        // Add any other headers as needed
    };
    logger.info(`Getting headers: ${headers}`);
    return headers;
}
// @tracer.captureMethod
function getCartId(eventHeaders) {
    /**
     * Retrieve cart_id from cookies if it exists, otherwise set and return it
     */
    logger.info("Getting cartId");
    const generatedCookie = () => {
        const cartId = String((0, crypto_1.randomUUID)());
        return [cartId, true];
    };
    const cookie = new Map();
    try {
        const cookieHeader = eventHeaders["cookie"];
        logger.info(`cookieHeader from eventHeaders: ${cookieHeader}`);
        if (cookieHeader) {
            logger.info("cookieHeader obtained: ", cookieHeader);
            cookieHeader.split(";").forEach((pair) => {
                const [key, value] = pair.trim().split("=");
                cookie.set(key, value);
            });
        }
        const cartCookie = cookie.get("cartId");
        logger.info(`cartCookie: ${cartCookie}`);
        if (cartCookie !== undefined) {
            return [cartCookie, false];
        }
    }
    catch (error) {
        // Handle the error as needed
    }
    const new_cookie = generatedCookie();
    logger.info("New cookie generated: ", new_cookie);
    return new_cookie;
}
exports.getCartId = getCartId;
async function getProduct(event, productId) {
    const apiKey = await getApiKey();
    // Modify the event to add the API key to headers
    const headers = {
        ...event.headers,
        "x-api-key": apiKey,
        "Content-Type": "application/json",
    };
    // Call product API to retrieve product details using productId
    const response = await fetch("https://api.themasteroffire.com/products/" + productId, {
        method: "GET",
        headers: headers,
    });
    // Return the response to the client
    const data = await response.json();
    const response_body = JSON.stringify(data);
    logger.info("API Call Result: ", response.status, response_body);
    return { response_body };
}
async function getApiKey() {
    try {
        if (!process.env.API_KEY) {
            // Retrieve the secret from AWS Secrets Manager
            const apiKey = await getSecretFromAWS("DeliVery/DVApiKey");
            // Set the API key in the environment variable
            process.env.API_KEY = apiKey;
            return apiKey;
        }
        return process.env.API_KEY;
    }
    catch (error) {
        console.error("Error retrieving API key:", error);
        return "";
    }
}
async function getSecretFromAWS(secretName) {
    return new Promise((resolve, reject) => {
        secretsManager.getSecretValue({ SecretId: secretName }, (err, data) => {
            if (err) {
                reject(err);
            }
            else {
                // Check if data.SecretString is defined before using it
                if (data && data.SecretString) {
                    resolve(data.SecretString);
                }
                else {
                    reject(new Error("SecretString is undefined"));
                }
            }
        });
    });
}
function generateTtl(days = 1) {
    /**
     * Generate epoch timestamp for a number of days in the future
     */
    const future = new Date();
    future.setUTCDate(future.getUTCDate() + days);
    return Math.floor(future.getTime() / 1000);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2FydC1oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhEQU9rQztBQUNsQywwREFBMEQ7QUFDMUQsMERBQTBEO0FBQzFELDREQUE0RDtBQUM1RCxtQ0FBOEM7QUFNOUMsNEVBQWlFO0FBRWpFLDJDQUEyQztBQUUzQyxNQUFNLFFBQVEsR0FBRyxJQUFJLGdDQUFjLENBQUMsRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0FBQ2xFLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQztBQUN2QiwrQkFBK0I7QUFDL0IsaUNBQWlDO0FBQ2pDLE1BQU0sY0FBYyxHQUFHLElBQUksdUNBQWMsRUFBRSxDQUFDO0FBUXJDLE1BQU0sV0FBVyxHQUEyQixLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7SUFDakUsTUFBTSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ3JDLElBQUksY0FBYyxHQUFnQixJQUFJLENBQUM7SUFDdkMsTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM1QyxNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEQsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRWxDLElBQUk7UUFDRixjQUFjLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSyxDQUFDLENBQUM7UUFDekMsTUFBTSxDQUFDLElBQUksQ0FDVCxtQkFBbUIsY0FBYyxpQkFBaUIsT0FBTyxFQUFFLENBQzVELENBQUM7S0FDSDtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsT0FBTztZQUNMLFVBQVUsRUFBRSxHQUFHO1lB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Q0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxPQUFlLENBQUM7SUFDbkM7O09BRUc7SUFDSCxNQUFNLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQzFCLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzlDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDN0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIER5bmFtb0RCQ2xpZW50LFxuICBHZXRJdGVtQ29tbWFuZCxcbiAgR2V0SXRlbUNvbW1hbmRJbnB1dCxcbiAgU2NhbkNvbW1hbmQsXG4gIFNjYW5Db21tYW5kSW5wdXQsXG4gIFVwZGF0ZUl0ZW1Db21tYW5kLFxufSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiXCI7XG4vLyBpbXBvcnQgeyBUcmFjZXIgfSBmcm9tIFwiQGF3cy1sYW1iZGEtcG93ZXJ0b29scy90cmFjZXJcIjtcbi8vIGltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAYXdzLWxhbWJkYS1wb3dlcnRvb2xzL2xvZ2dlclwiO1xuLy8gaW1wb3J0IHsgTWV0cmljcyB9IGZyb20gXCJAYXdzLWxhbWJkYS1wb3dlcnRvb2xzL21ldHJpY3NcIjtcbmltcG9ydCB7IHJhbmRvbVVVSUQgYXMgdXVpZHY0IH0gZnJvbSBcImNyeXB0b1wiO1xuaW1wb3J0IHtcbiAgQVBJR2F0ZXdheVByb3h5SGFuZGxlcixcbiAgQVBJR2F0ZXdheVByb3h5RXZlbnQsXG4gIEFQSUdhdGV3YXlQcm94eUV2ZW50SGVhZGVycyxcbn0gZnJvbSBcImF3cy1sYW1iZGFcIjtcbmltcG9ydCB7IFNlY3JldHNNYW5hZ2VyIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1zZWNyZXRzLW1hbmFnZXJcIjtcblxuLy8gaW1wb3J0IHsgQ2FydCB9IGZyb20gXCIuLi9sYXllcnMvbW9kZWxzXCI7XG5cbmNvbnN0IGR5bmFtb0RCID0gbmV3IER5bmFtb0RCQ2xpZW50KHsgcmVnaW9uOiBcImFwLXNvdXRoZWFzdC0yXCIgfSk7XG5jb25zdCBsb2dnZXIgPSBjb25zb2xlO1xuLy8gY29uc3QgdHJhY2VyID0gbmV3IFRyYWNlcigpO1xuLy8gY29uc3QgbWV0cmljcyA9IG5ldyBNZXRyaWNzKCk7XG5jb25zdCBzZWNyZXRzTWFuYWdlciA9IG5ldyBTZWNyZXRzTWFuYWdlcigpO1xuXG5leHBvcnQgaW50ZXJmYWNlIENhcnQge1xuICBwcm9kdWN0SWQ6IHN0cmluZztcbiAgcXVhbnRpdHk6IG51bWJlcjtcbiAgcHJpY2VTdHJpbmc6IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IGNhcnRIYW5kbGVyOiBBUElHYXRld2F5UHJveHlIYW5kbGVyID0gYXN5bmMgKGV2ZW50KSA9PiB7XG4gIGxvZ2dlci5pbmZvKFwiY2FydEhhbmRsZXIgaW5pdGlhdGVkXCIpO1xuICB2YXIgcmVxdWVzdFBheWxvYWQ6IENhcnQgfCBudWxsID0gbnVsbDtcbiAgY29uc3QgY2FydENvb2tpZSA9IGdldENhcnRJZChldmVudC5oZWFkZXJzKTtcbiAgY29uc3QgY2FydElkID0gY2FydENvb2tpZVswXTtcbiAgbG9nZ2VyLmluZm8oXCJjYXJ0SGFuZGxlciBoZWFkZXJzOiBcIiwgZXZlbnQuaGVhZGVycyk7XG4gIGNvbnN0IGhlYWRlcnMgPSBnZXRIZWFkZXJzKGNhcnRJZClcblxuICB0cnkge1xuICAgIHJlcXVlc3RQYXlsb2FkID0gSlNPTi5wYXJzZShldmVudC5ib2R5ISk7XG4gICAgbG9nZ2VyLmluZm8oXG4gICAgICBgcmVxdWVzdFBheWxvYWQ6ICR7cmVxdWVzdFBheWxvYWR9IGFuZCBoZWFkZXJzOiAke2hlYWRlcnN9YFxuICAgICk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6IFwiTm8gUmVxdWVzdCBwYXlsb2FkXCIgfSksXG4gICAgfTtcbiAgfVxuXG4gIC8vIEhhbmRsZSBTaG9wcGluZyBDYXJ0XG4gIGlmICghcmVxdWVzdFBheWxvYWQgJiYgZXZlbnQuaHR0cE1ldGhvZCA9PSBcIkdFVFwiKSB7XG4gICAgY29uc3QgcGsgPSBgY2FydCMke2NhcnRJZH1gO1xuICAgIGxvZ2dlci5pbmZvKFwiR0VUIGNhcnQvIGludm9rZWQgcGs6XCIsIHBrKTtcbiAgICBjb25zdCBwYXJhbXM6IFNjYW5Db21tYW5kSW5wdXQgPSB7XG4gICAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LkNBUlRfVEFCTEVfTkFNRSxcbiAgICAgIEZpbHRlckV4cHJlc3Npb246IFwicGsgPSA6cGtcIixcbiAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHtcbiAgICAgICAgXCI6cGtcIjogeyBTOiBwayB9LFxuICAgICAgfSxcbiAgICB9O1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBkeW5hbW9EQi5zZW5kKG5ldyBTY2FuQ29tbWFuZChwYXJhbXMpKTtcbiAgICBjb25zdCByZXNwb25zZV9ib2R5ID0gSlNPTi5zdHJpbmdpZnkoZGF0YS5JdGVtcyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICBib2R5OiByZXNwb25zZV9ib2R5LFxuICAgIH07XG4gIH1cblxuICAvLyBIYW5kbGluZyBBZGRpbmcvTW9kaWZ5aW5nIEl0ZW1zIGZyb20gdGhlIENhcnQuXG4gIGNvbnN0IHByb2R1Y3RfaWQgPSByZXF1ZXN0UGF5bG9hZD8ucHJvZHVjdElkID8/IFwiZGVmYXVsdFByb2R1Y3RJZFwiO1xuICBsb2dnZXIuaW5mbyhcInByb2R1Y3RfaWQ6XCIsIHByb2R1Y3RfaWQpO1xuICBjb25zdCBxdWFudGl0eSA9IHJlcXVlc3RQYXlsb2FkPy5xdWFudGl0eSA/PyAxO1xuICBjb25zdCBzdHJpbmdfcHJpY2U6IHN0cmluZyA9IHJlcXVlc3RQYXlsb2FkPy5wcmljZVN0cmluZyA/PyBcIiQwXCI7XG4vLyAgIGNvbnN0IHByb2R1Y3RfZGV0YWlsczogc3RyaW5nID0gcmVxdWVzdFBheWxvYWQ/LnByb2R1Y3ROYW1lIHx8IFwiXCI7XG4gIGNvbnN0IHByaWNlOiBudW1iZXIgPSBwYXJzZUZsb2F0KHN0cmluZ19wcmljZS5yZXBsYWNlKFwiJFwiLCBcIlwiKSk7XG5cbiAgY29uc3QgY2FydFRhYmxlID0gcHJvY2Vzcy5lbnYuQ0FSVF9UQUJMRV9OQU1FO1xuICBsZXQgcGssIHNrLCB0dGw7XG4gIHBrID0gYGNhcnQjJHtjYXJ0SWR9YDtcbiAgc2sgPSBgcHJvZHVjdCMke3Byb2R1Y3RfaWR9YDtcbiAgdHRsID0gZ2VuZXJhdGVUdGwoKTtcbiAgbG9nZ2VyLmluZm8oYENhcnQgZW50cnkgLSBwazoke3BrfSwgc2s6JHtza30sIHR0bDoke3R0bH1gKTtcblxuICBpZiAocXVhbnRpdHkgPCAwKSB7XG4gICAgYXdhaXQgZHluYW1vREIuc2VuZChcbiAgICAgIG5ldyBVcGRhdGVJdGVtQ29tbWFuZCh7XG4gICAgICAgIFRhYmxlTmFtZTogY2FydFRhYmxlLFxuICAgICAgICBLZXk6IHtcbiAgICAgICAgICBwazogeyBTOiBwayB9LFxuICAgICAgICAgIHNrOiB7IFM6IHNrIH0sXG4gICAgICAgIH0sXG4gICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczoge1xuICAgICAgICAgIFwiI3F1YW50aXR5XCI6IFwicXVhbnRpdHlcIixcbiAgICAgICAgICBcIiNwcmljZVwiOiBcInByaWNlXCIsXG4gICAgICAgICAgXCIjZXhwaXJhdGlvblRpbWVcIjogXCJleHBpcmF0aW9uVGltZVwiLFxuICAgICAgICAgIFwiI3Byb2R1Y3REZXRhaWxcIjogXCJwcm9kdWN0RGV0YWlsXCIsXG4gICAgICAgIH0sXG4gICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHtcbiAgICAgICAgICBcIjp2YWxcIjogeyBOOiBxdWFudGl0eS50b1N0cmluZygpIH0sXG4gICAgICAgICAgXCI6dW5pdFByaWNlXCI6IHsgTjogcHJpY2UudG9TdHJpbmcoKSB9LFxuICAgICAgICAgIFwiOnR0bFwiOiB7IE46IGdlbmVyYXRlVHRsKCkudG9TdHJpbmcoKSB9LFxuICAgICAgICAvLyAgIFwiOnByb2R1Y3REZXRhaWxcIjogeyBTOiBwcm9kdWN0X2RldGFpbHMgfSxcbiAgICAgICAgICBcIjpsaW1pdFwiOiB7IE46IE1hdGguYWJzKHF1YW50aXR5KS50b1N0cmluZygpIH0sXG4gICAgICAgIH0sXG4gICAgICAgIFVwZGF0ZUV4cHJlc3Npb246XG4gICAgICAgICAgXCJBREQgI3F1YW50aXR5IDp2YWwgU0VUICNleHBpcmF0aW9uVGltZSA9IDp0dGwsICNwcm9kdWN0RGV0YWlsID0gOnByb2R1Y3REZXRhaWwsICNwcmljZSA9IDp1bml0UHJpY2VcIixcbiAgICAgICAgQ29uZGl0aW9uRXhwcmVzc2lvbjogXCJxdWFudGl0eSA+PSA6bGltaXRcIixcbiAgICAgIH0pXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBhd2FpdCBkeW5hbW9EQi5zZW5kKFxuICAgICAgbmV3IFVwZGF0ZUl0ZW1Db21tYW5kKHtcbiAgICAgICAgVGFibGVOYW1lOiBjYXJ0VGFibGUsXG4gICAgICAgIEtleToge1xuICAgICAgICAgIHBrOiB7IFM6IHBrIH0sXG4gICAgICAgICAgc2s6IHsgUzogYHByb2R1Y3QjJHtwcm9kdWN0X2lkfWAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiB7XG4gICAgICAgICAgXCIjcXVhbnRpdHlcIjogXCJxdWFudGl0eVwiLFxuICAgICAgICAgIFwiI3ByaWNlXCI6IFwicHJpY2VcIixcbiAgICAgICAgICBcIiNleHBpcmF0aW9uVGltZVwiOiBcImV4cGlyYXRpb25UaW1lXCIsXG4gICAgICAgICAgXCIjcHJvZHVjdERldGFpbFwiOiBcInByb2R1Y3REZXRhaWxcIixcbiAgICAgICAgfSxcbiAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczoge1xuICAgICAgICAgIFwiOnZhbFwiOiB7IE46IHF1YW50aXR5LnRvU3RyaW5nKCkgfSxcbiAgICAgICAgICBcIjp1bml0UHJpY2VcIjogeyBOOiBwcmljZS50b1N0cmluZygpIH0sXG4gICAgICAgICAgXCI6dHRsXCI6IHsgTjogZ2VuZXJhdGVUdGwoKS50b1N0cmluZygpIH0sXG4gICAgICAgIC8vICAgXCI6cHJvZHVjdERldGFpbFwiOiB7IFM6IHByb2R1Y3RfZGV0YWlscyB9LFxuICAgICAgICB9LFxuICAgICAgICBVcGRhdGVFeHByZXNzaW9uOlxuICAgICAgICAgIFwiQUREICNxdWFudGl0eSA6dmFsIFNFVCAjZXhwaXJhdGlvblRpbWUgPSA6dHRsLCAjcHJvZHVjdERldGFpbCA9IDpwcm9kdWN0RGV0YWlsLCAjcHJpY2UgPSA6dW5pdFByaWNlXCIsXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICBoZWFkZXJzOiBoZWFkZXJzLCAvL1dlIGRvbid0IHdhbnQgdG8gZXhwb3NlIHRoZSBBcGlLZXlcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBtZXNzYWdlOiBgUHJvY2Vzc2VkIHN1Y2Nlc3NmdWwhICR7cHJvZHVjdF9pZH0gLSAke3F1YW50aXR5fSBDYXJ0SWQ6ICR7Y2FydElkfWAsXG4gICAgfSksXG4gIH07XG59O1xuXG5mdW5jdGlvbiBnZXRIZWFkZXJzKGNhcnRJZDogc3RyaW5nKTogUmVjb3JkPHN0cmluZywgYW55PiB7XG4gIC8qKlxuICAgKiBHZXQgdGhlIGhlYWRlcnMgdG8gYWRkIHRvIHJlc3BvbnNlIGRhdGFcbiAgICovXG5cbiAgY29uc3QgaGVhZGVycyA9IHtcbiAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiOiBcIipcIixcbiAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzXCI6IHRydWUsXG4gICAgXCJTZXQtQ29va2llXCI6IGBjYXJ0SWQ9JHtjYXJ0SWR9OyBNYXgtQWdlPSR7XG4gICAgICA2MCAqIDYwICogMjRcbiAgICB9OyBTZWN1cmU7IEh0dHBPbmx5OyBTYW1lU2l0ZT1Ob25lOyBQYXRoPS9gLFxuICAgIC8vIEFkZCBhbnkgb3RoZXIgaGVhZGVycyBhcyBuZWVkZWRcbiAgfTtcbiAgbG9nZ2VyLmluZm8oYEdldHRpbmcgaGVhZGVyczogJHtoZWFkZXJzfWApO1xuICByZXR1cm4gaGVhZGVycztcbn1cblxuLy8gQHRyYWNlci5jYXB0dXJlTWV0aG9kXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FydElkKFxuICBldmVudEhlYWRlcnM6IEFQSUdhdGV3YXlQcm94eUV2ZW50SGVhZGVyc1xuKTogW3N0cmluZywgYm9vbGVhbl0ge1xuICAvKipcbiAgICogUmV0cmlldmUgY2FydF9pZCBmcm9tIGNvb2tpZXMgaWYgaXQgZXhpc3RzLCBvdGhlcndpc2Ugc2V0IGFuZCByZXR1cm4gaXRcbiAgICovXG5cbiAgbG9nZ2VyLmluZm8oXCJHZXR0aW5nIGNhcnRJZFwiKTtcbiAgY29uc3QgZ2VuZXJhdGVkQ29va2llID0gKCk6IFtzdHJpbmcsIGJvb2xlYW5dID0+IHtcbiAgICBjb25zdCBjYXJ0SWQgPSBTdHJpbmcodXVpZHY0KCkpO1xuICAgIHJldHVybiBbY2FydElkLCB0cnVlXTtcbiAgfTtcblxuICBjb25zdCBjb29raWUgPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nPigpO1xuICB0cnkge1xuICAgIGNvbnN0IGNvb2tpZUhlYWRlciA9IGV2ZW50SGVhZGVyc1tcImNvb2tpZVwiXTtcbiAgICBsb2dnZXIuaW5mbyhgY29va2llSGVhZGVyIGZyb20gZXZlbnRIZWFkZXJzOiAke2Nvb2tpZUhlYWRlcn1gKTtcbiAgICBpZiAoY29va2llSGVhZGVyKSB7XG4gICAgICBsb2dnZXIuaW5mbyhcImNvb2tpZUhlYWRlciBvYnRhaW5lZDogXCIsIGNvb2tpZUhlYWRlcik7XG4gICAgICBjb29raWVIZWFkZXIuc3BsaXQoXCI7XCIpLmZvckVhY2goKHBhaXIpID0+IHtcbiAgICAgICAgY29uc3QgW2tleSwgdmFsdWVdID0gcGFpci50cmltKCkuc3BsaXQoXCI9XCIpO1xuICAgICAgICBjb29raWUuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgY2FydENvb2tpZSA9IGNvb2tpZS5nZXQoXCJjYXJ0SWRcIik7XG4gICAgbG9nZ2VyLmluZm8oYGNhcnRDb29raWU6ICR7Y2FydENvb2tpZX1gKTtcbiAgICBpZiAoY2FydENvb2tpZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gW2NhcnRDb29raWUsIGZhbHNlXTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8gSGFuZGxlIHRoZSBlcnJvciBhcyBuZWVkZWRcbiAgfVxuICBjb25zdCBuZXdfY29va2llID0gZ2VuZXJhdGVkQ29va2llKCk7XG4gIGxvZ2dlci5pbmZvKFwiTmV3IGNvb2tpZSBnZW5lcmF0ZWQ6IFwiLCBuZXdfY29va2llKTtcbiAgcmV0dXJuIG5ld19jb29raWU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFByb2R1Y3QoXG4gIGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudCxcbiAgcHJvZHVjdElkOiBzdHJpbmdcbik6IFByb21pc2U8UmVjb3JkPHN0cmluZywgYW55Pj4ge1xuICBjb25zdCBhcGlLZXkgPSBhd2FpdCBnZXRBcGlLZXkoKTtcbiAgLy8gTW9kaWZ5IHRoZSBldmVudCB0byBhZGQgdGhlIEFQSSBrZXkgdG8gaGVhZGVyc1xuICBjb25zdCBoZWFkZXJzID0ge1xuICAgIC4uLmV2ZW50LmhlYWRlcnMsXG4gICAgXCJ4LWFwaS1rZXlcIjogYXBpS2V5LFxuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICB9O1xuXG4gIC8vIENhbGwgcHJvZHVjdCBBUEkgdG8gcmV0cmlldmUgcHJvZHVjdCBkZXRhaWxzIHVzaW5nIHByb2R1Y3RJZFxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgIFwiaHR0cHM6Ly9hcGkudGhlbWFzdGVyb2ZmaXJlLmNvbS9wcm9kdWN0cy9cIiArIHByb2R1Y3RJZCxcbiAgICB7XG4gICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgIH1cbiAgKTtcblxuICAvLyBSZXR1cm4gdGhlIHJlc3BvbnNlIHRvIHRoZSBjbGllbnRcbiAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgY29uc3QgcmVzcG9uc2VfYm9keSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICBsb2dnZXIuaW5mbyhcIkFQSSBDYWxsIFJlc3VsdDogXCIsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2VfYm9keSk7XG4gIHJldHVybiB7IHJlc3BvbnNlX2JvZHkgfTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0QXBpS2V5KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gIHRyeSB7XG4gICAgaWYgKCFwcm9jZXNzLmVudi5BUElfS0VZKSB7XG4gICAgICAvLyBSZXRyaWV2ZSB0aGUgc2VjcmV0IGZyb20gQVdTIFNlY3JldHMgTWFuYWdlclxuICAgICAgY29uc3QgYXBpS2V5ID0gYXdhaXQgZ2V0U2VjcmV0RnJvbUFXUyhcIkRlbGlWZXJ5L0RWQXBpS2V5XCIpO1xuXG4gICAgICAvLyBTZXQgdGhlIEFQSSBrZXkgaW4gdGhlIGVudmlyb25tZW50IHZhcmlhYmxlXG4gICAgICBwcm9jZXNzLmVudi5BUElfS0VZID0gYXBpS2V5O1xuXG4gICAgICByZXR1cm4gYXBpS2V5O1xuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzLmVudi5BUElfS0VZO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciByZXRyaWV2aW5nIEFQSSBrZXk6XCIsIGVycm9yKTtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRTZWNyZXRGcm9tQVdTKHNlY3JldE5hbWU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgc2VjcmV0c01hbmFnZXIuZ2V0U2VjcmV0VmFsdWUoeyBTZWNyZXRJZDogc2VjcmV0TmFtZSB9LCAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgZGF0YS5TZWNyZXRTdHJpbmcgaXMgZGVmaW5lZCBiZWZvcmUgdXNpbmcgaXRcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5TZWNyZXRTdHJpbmcpIHtcbiAgICAgICAgICByZXNvbHZlKGRhdGEuU2VjcmV0U3RyaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiU2VjcmV0U3RyaW5nIGlzIHVuZGVmaW5lZFwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVHRsKGRheXM6IG51bWJlciA9IDEpOiBudW1iZXIge1xuICAvKipcbiAgICogR2VuZXJhdGUgZXBvY2ggdGltZXN0YW1wIGZvciBhIG51bWJlciBvZiBkYXlzIGluIHRoZSBmdXR1cmVcbiAgICovXG4gIGNvbnN0IGZ1dHVyZSA9IG5ldyBEYXRlKCk7XG4gIGZ1dHVyZS5zZXRVVENEYXRlKGZ1dHVyZS5nZXRVVENEYXRlKCkgKyBkYXlzKTtcbiAgcmV0dXJuIE1hdGguZmxvb3IoZnV0dXJlLmdldFRpbWUoKSAvIDEwMDApO1xufVxuIl19